{
  "version": 3,
  "sources": ["../src/code.ts"],
  "sourcesContent": ["// This plugin will open a window to prompt the user to enter a number, and\n// it will then create that many rectangles on the screen.\n\n// This file holds the main code for plugins. Code in this file has access to\n// the *figma document* via the figma global object.\n// You can access browser APIs in the <script> tag inside \"ui.html\" which has a\n// full browser environment (See https://www.figma.com/plugin-docs/how-plugins-run).\n\n// This shows the HTML page in \"ui.html\".\nfigma.showUI(__html__, { width: 500, height: 600 });\n\n// Calls to \"parent.postMessage\" from within the HTML page will trigger this\n// callback. The callback will be passed the \"pluginMessage\" property of the\n// posted message.\nfigma.ui.onmessage = async (msg: { type: string; count: number }) => {\n  // One way of distinguishing between different types of messages sent from\n  // your HTML page is to use an object with a \"type\" property like this.\n  if (msg.type === \"generateTranslationVariables\") {\n    let str = \"\";\n    const localCollections =\n      await figma.variables.getLocalVariableCollectionsAsync();\n\n    const i18nCollection = localCollections.find((c) => c.name === \"i18n\");\n    console.log({ i18nCollection });\n\n    if (i18nCollection === undefined) {\n      return figma.ui.postMessage(\"No i18nCollection found.\");\n    } else {\n      const modes = i18nCollection?.modes;\n      for (let i = 0; i < modes.length; i++) {\n        const modeName = modes[i].name;\n        str += `const i18n_${modeName} = {`;\n\n        for (const translationKey of i18nCollection.variableIds) {\n          const variable = await figma.variables.getVariableByIdAsync(\n            translationKey\n          );\n          if (variable === null) {\n            console.warn(`Variable with id ${translationKey} not found.`);\n            return;\n          } else {\n            const name = variable.name;\n\n            // const value = variable.valuesByMode;\n            str += `\"${name}\": \"${\n              variable.valuesByMode[modes[i].modeId] ?? \"i18n.TODO_TRANSLATE\"\n            }\",`;\n          }\n        }\n\n        str += \"};\\n\";\n      }\n    }\n\n    figma.ui.postMessage(str);\n  } else if (msg.type === \"assignTranslationVariables\") {\n    const localCollections =\n      await figma.variables.getLocalVariableCollectionsAsync();\n\n    const i18nCollection = localCollections.find((c) => c.name === \"i18n\");\n    console.log({ i18nCollection });\n\n    if (i18nCollection === undefined) {\n      return figma.ui.postMessage(\"No i18nCollection found.\");\n    } else {\n      for (const node of figma.currentPage.selection) {\n        if (node.type === \"TEXT\") {\n          const layerName = node.name;\n\n          let variable: Variable | undefined = undefined;\n\n          for (const variableId of i18nCollection.variableIds) {\n            const v = await figma.variables.getVariableByIdAsync(variableId);\n            if (v?.name === layerName) {\n              variable = v;\n              break;\n            }\n          }\n\n          if (variable === undefined) {\n            figma.ui.postMessage(\n              `layer name does not match any variable in i18n collection, please check the layer name: ${layerName}`\n            );\n          } else {\n            console.log({ variable });\n            node.setBoundVariable(\"characters\", variable);\n            console.log({ nodeAfter: node, variable });\n            figma.ui.postMessage(\"successfully assigned translation variables\");\n          }\n        }\n      }\n    }\n  }\n};\n"],
  "mappings": ";;;AASA,QAAM,OAAO,UAAU,EAAE,OAAO,KAAK,QAAQ,IAAI,CAAC;AAKlD,QAAM,GAAG,YAAY,OAAO,QAAyC;AAdrE;AAiBE,QAAI,IAAI,SAAS,gCAAgC;AAC/C,UAAI,MAAM;AACV,YAAM,mBACJ,MAAM,MAAM,UAAU,iCAAiC;AAEzD,YAAM,iBAAiB,iBAAiB,KAAK,CAAC,MAAM,EAAE,SAAS,MAAM;AACrE,cAAQ,IAAI,EAAE,eAAe,CAAC;AAE9B,UAAI,mBAAmB,QAAW;AAChC,eAAO,MAAM,GAAG,YAAY,0BAA0B;AAAA,MACxD,OAAO;AACL,cAAM,QAAQ,iDAAgB;AAC9B,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,gBAAM,WAAW,MAAM,CAAC,EAAE;AAC1B,iBAAO,cAAc,QAAQ;AAE7B,qBAAW,kBAAkB,eAAe,aAAa;AACvD,kBAAM,WAAW,MAAM,MAAM,UAAU;AAAA,cACrC;AAAA,YACF;AACA,gBAAI,aAAa,MAAM;AACrB,sBAAQ,KAAK,oBAAoB,cAAc,aAAa;AAC5D;AAAA,YACF,OAAO;AACL,oBAAM,OAAO,SAAS;AAGtB,qBAAO,IAAI,IAAI,QACb,cAAS,aAAa,MAAM,CAAC,EAAE,MAAM,MAArC,YAA0C,qBAC5C;AAAA,YACF;AAAA,UACF;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,YAAM,GAAG,YAAY,GAAG;AAAA,IAC1B,WAAW,IAAI,SAAS,8BAA8B;AACpD,YAAM,mBACJ,MAAM,MAAM,UAAU,iCAAiC;AAEzD,YAAM,iBAAiB,iBAAiB,KAAK,CAAC,MAAM,EAAE,SAAS,MAAM;AACrE,cAAQ,IAAI,EAAE,eAAe,CAAC;AAE9B,UAAI,mBAAmB,QAAW;AAChC,eAAO,MAAM,GAAG,YAAY,0BAA0B;AAAA,MACxD,OAAO;AACL,mBAAW,QAAQ,MAAM,YAAY,WAAW;AAC9C,cAAI,KAAK,SAAS,QAAQ;AACxB,kBAAM,YAAY,KAAK;AAEvB,gBAAI,WAAiC;AAErC,uBAAW,cAAc,eAAe,aAAa;AACnD,oBAAM,IAAI,MAAM,MAAM,UAAU,qBAAqB,UAAU;AAC/D,mBAAI,uBAAG,UAAS,WAAW;AACzB,2BAAW;AACX;AAAA,cACF;AAAA,YACF;AAEA,gBAAI,aAAa,QAAW;AAC1B,oBAAM,GAAG;AAAA,gBACP,2FAA2F,SAAS;AAAA,cACtG;AAAA,YACF,OAAO;AACL,sBAAQ,IAAI,EAAE,SAAS,CAAC;AACxB,mBAAK,iBAAiB,cAAc,QAAQ;AAC5C,sBAAQ,IAAI,EAAE,WAAW,MAAM,SAAS,CAAC;AACzC,oBAAM,GAAG,YAAY,6CAA6C;AAAA,YACpE;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;",
  "names": []
}
