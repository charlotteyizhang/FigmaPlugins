{
  "version": 3,
  "sources": ["../src/code.ts"],
  "sourcesContent": ["// This plugin will open a window to prompt the user to enter a number, and\n// it will then create that many rectangles on the screen.\n\n// This file holds the main code for plugins. Code in this file has access to\n// the *figma document* via the figma global object.\n// You can access browser APIs in the <script> tag inside \"ui.html\" which has a\n// full browser environment (See https://www.figma.com/plugin-docs/how-plugins-run).\n\n// This shows the HTML page in \"ui.html\".\nfigma.showUI(__html__, { width: 500, height: 600 });\n\n// Calls to \"parent.postMessage\" from within the HTML page will trigger this\n// callback. The callback will be passed the \"pluginMessage\" property of the\n// posted message.\nfigma.ui.onmessage = async (msg: { type: string; count: number }) => {\n  // One way of distinguishing between different types of messages sent from\n  // your HTML page is to use an object with a \"type\" property like this.\n  if (msg.type === \"generateTranslationVariables\") {\n    let str = \"\";\n    const localCollections =\n      await figma.variables.getLocalVariableCollectionsAsync();\n\n    const i18nCollection = localCollections.find((c) => c.name === \"i18n\");\n    console.log({ i18nCollection });\n\n    if (i18nCollection === undefined) {\n      return figma.ui.postMessage(\"No i18nCollection found.\");\n    } else {\n      const modes = i18nCollection?.modes;\n      for (let i = 0; i < modes.length; i++) {\n        const modeName = modes[i].name;\n        str += `const i18n_${modeName} = {`;\n\n        i18nCollection.variableIds.map((translationKey) => {\n          const variable = figma.variables.getVariableById(translationKey);\n          if (variable === null) {\n            console.warn(`Variable with id ${translationKey} not found.`);\n            return;\n          } else {\n            const name = variable.name;\n\n            // const value = variable.valuesByMode;\n            str += `\"${name}\": \"${\n              variable.valuesByMode[modes[i].modeId] ?? \"i18n.TODO_TRANSLATE\"\n            }\",`;\n          }\n        });\n        str += \"};\\n\";\n      }\n    }\n\n    figma.ui.postMessage(str);\n  } else if (msg.type === \"assignTranslationVariables\") {\n    figma.variables\n      .getLocalVariableCollectionsAsync()\n      .then((localCollections) => {\n        const i18nCollection = localCollections.find((c) => c.name === \"i18n\");\n        console.log({ i18nCollection });\n\n        if (i18nCollection === undefined) {\n          return figma.ui.postMessage(\"No i18nCollection found.\");\n        } else {\n          for (const node of figma.currentPage.selection) {\n            if (node.type === \"TEXT\") {\n              const layerName = node.name;\n\n              let variable: Variable | undefined = undefined;\n\n              for (const variableId of i18nCollection.variableIds) {\n                const v = figma.variables.getVariableById(variableId);\n                if (v?.name === layerName) {\n                  variable = v;\n                  break;\n                }\n              }\n\n              if (variable === undefined) {\n                figma.ui.postMessage(\n                  `layer name does not match any variable in i18n collection, please check the layer name: ${layerName}`\n                );\n              } else {\n                console.log({ variable });\n                node.setBoundVariable(\"characters\", variable);\n                console.log({ nodeAfter: node, variable });\n                figma.ui.postMessage(\n                  \"successfully assigned translation variables\"\n                );\n              }\n            }\n          }\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error assigning translation variables:\", error);\n        figma.ui.postMessage(\"Error assigning translation variables\");\n      });\n  }\n};\n"],
  "mappings": ";;;AASA,QAAM,OAAO,UAAU,EAAE,OAAO,KAAK,QAAQ,IAAI,CAAC;AAKlD,QAAM,GAAG,YAAY,OAAO,QAAyC;AAGnE,QAAI,IAAI,SAAS,gCAAgC;AAC/C,UAAI,MAAM;AACV,YAAM,mBACJ,MAAM,MAAM,UAAU,iCAAiC;AAEzD,YAAM,iBAAiB,iBAAiB,KAAK,CAAC,MAAM,EAAE,SAAS,MAAM;AACrE,cAAQ,IAAI,EAAE,eAAe,CAAC;AAE9B,UAAI,mBAAmB,QAAW;AAChC,eAAO,MAAM,GAAG,YAAY,0BAA0B;AAAA,MACxD,OAAO;AACL,cAAM,QAAQ,iDAAgB;AAC9B,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,gBAAM,WAAW,MAAM,CAAC,EAAE;AAC1B,iBAAO,cAAc,QAAQ;AAE7B,yBAAe,YAAY,IAAI,CAAC,mBAAmB;AAjC3D;AAkCU,kBAAM,WAAW,MAAM,UAAU,gBAAgB,cAAc;AAC/D,gBAAI,aAAa,MAAM;AACrB,sBAAQ,KAAK,oBAAoB,cAAc,aAAa;AAC5D;AAAA,YACF,OAAO;AACL,oBAAM,OAAO,SAAS;AAGtB,qBAAO,IAAI,IAAI,QACb,cAAS,aAAa,MAAM,CAAC,EAAE,MAAM,MAArC,YAA0C,qBAC5C;AAAA,YACF;AAAA,UACF,CAAC;AACD,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,YAAM,GAAG,YAAY,GAAG;AAAA,IAC1B,WAAW,IAAI,SAAS,8BAA8B;AACpD,YAAM,UACH,iCAAiC,EACjC,KAAK,CAAC,qBAAqB;AAC1B,cAAM,iBAAiB,iBAAiB,KAAK,CAAC,MAAM,EAAE,SAAS,MAAM;AACrE,gBAAQ,IAAI,EAAE,eAAe,CAAC;AAE9B,YAAI,mBAAmB,QAAW;AAChC,iBAAO,MAAM,GAAG,YAAY,0BAA0B;AAAA,QACxD,OAAO;AACL,qBAAW,QAAQ,MAAM,YAAY,WAAW;AAC9C,gBAAI,KAAK,SAAS,QAAQ;AACxB,oBAAM,YAAY,KAAK;AAEvB,kBAAI,WAAiC;AAErC,yBAAW,cAAc,eAAe,aAAa;AACnD,sBAAM,IAAI,MAAM,UAAU,gBAAgB,UAAU;AACpD,qBAAI,uBAAG,UAAS,WAAW;AACzB,6BAAW;AACX;AAAA,gBACF;AAAA,cACF;AAEA,kBAAI,aAAa,QAAW;AAC1B,sBAAM,GAAG;AAAA,kBACP,2FAA2F,SAAS;AAAA,gBACtG;AAAA,cACF,OAAO;AACL,wBAAQ,IAAI,EAAE,SAAS,CAAC;AACxB,qBAAK,iBAAiB,cAAc,QAAQ;AAC5C,wBAAQ,IAAI,EAAE,WAAW,MAAM,SAAS,CAAC;AACzC,sBAAM,GAAG;AAAA,kBACP;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC,EACA,MAAM,CAAC,UAAU;AAChB,gBAAQ,MAAM,0CAA0C,KAAK;AAC7D,cAAM,GAAG,YAAY,uCAAuC;AAAA,MAC9D,CAAC;AAAA,IACL;AAAA,EACF;",
  "names": []
}
