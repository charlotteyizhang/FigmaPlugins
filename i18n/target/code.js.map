{
  "version": 3,
  "sources": ["../src/helper.ts", "../src/code.ts"],
  "sourcesContent": ["export const findOrCreateCollection = (\n  localCollections: Array<VariableCollection>,\n  targetName: string\n) => {\n  const collection = localCollections.find((v) => {\n    return v.name.match(targetName);\n  });\n  if (collection === undefined) {\n    return figma.variables.createVariableCollection(targetName);\n  } else {\n    return collection;\n  }\n};\n\nexport const modeName = {\n  en: \"en\",\n  ja: \"ja\",\n} as const;\nexport type Mode = keyof typeof modeName;\n\nconst patterns = [\n  {\n    paramName: \"n\",\n    displayVariableName: \"unit\",\n    p: /\\b\\d+(?:\\.\\d+)?\\s?(?:w|wh|kwh|kw|%)\\b/i,\n  }, // number + unit\n  {\n    paramName: \"timestamp\",\n    displayVariableName: \"timestamp\",\n    p: /\\b\\d{1,2}:\\d{2}(?:\\s?(?:AM|PM))?\\b/i,\n  }, // timestamp (12, 4:30, 3 AM)\n];\nexport const generateTemplateFn = (input: string): string => {\n  let matchStr = input;\n\n  const params: Array<string> = [];\n  let idx = 0;\n\n  for (const pattern of patterns) {\n    const match = input.match(pattern.p);\n    console.log({ match });\n\n    if (match) {\n      const displayName = pattern.displayVariableName + idx;\n      const replaced = input.replace(match[0], \"${\" + displayName + \"}\");\n      params.push(displayName + \":string\");\n      matchStr = replaced;\n    }\n  }\n\n  return matchStr !== input\n    ? \"(\" + params.join(\",\") + \")=>\" + \"`\" + matchStr + \"`\"\n    : input;\n};\n", "// This plugin will open a window to prompt the user to enter a number, and\n// it will then create that many rectangles on the screen.\n\nimport { findOrCreateCollection, generateTemplateFn, modeName } from \"./helper\";\n\n// This file holds the main code for plugins. Code in this file has access to\n// the *figma document* via the figma global object.\n// You can access browser APIs in the <script> tag inside \"ui.html\" which has a\n// full browser environment (See https://www.figma.com/plugin-docs/how-plugins-run).\n\n// This shows the HTML page in \"ui.html\".\nfigma.showUI(__html__, { width: 500, height: 600 });\n\n// Calls to \"parent.postMessage\" from within the HTML page will trigger this\n// callback. The callback will be passed the \"pluginMessage\" property of the\n// posted message.\n\ninterface Generate {\n  type: \"generateTranslationVariables\";\n}\ninterface Assign {\n  type: \"assignTranslationVariables\";\n}\ninterface Create {\n  type: \"createVariables\";\n  language: \"en\" | \"ja\";\n}\n\ntype Message = Generate | Assign | Create;\nfigma.ui.onmessage = async (msg: Message) => {\n  // One way of distinguishing between different types of messages sent from\n  // your HTML page is to use an object with a \"type\" property like this.\n  if (msg.type === \"generateTranslationVariables\") {\n    let str = \"\";\n    const localCollections =\n      await figma.variables.getLocalVariableCollectionsAsync();\n\n    const i18nCollection = localCollections.find((c) => c.name === \"i18n\");\n    console.log({ i18nCollection });\n\n    if (i18nCollection === undefined) {\n      return figma.ui.postMessage(\"No i18nCollection found.\");\n    } else {\n      const modes = i18nCollection?.modes;\n      for (let i = 0; i < modes.length; i++) {\n        const modeName = modes[i].name;\n        str += `const i18n_${modeName} = {`;\n\n        for (const translationKey of i18nCollection.variableIds) {\n          const variable = await figma.variables.getVariableByIdAsync(\n            translationKey\n          );\n          if (variable === null) {\n            console.warn(`Variable with id ${translationKey} not found.`);\n            return;\n          } else {\n            const name = variable.name;\n\n            const value =\n              variable.valuesByMode[modes[i].modeId] ?? \"i18n.TODO_TRANSLATE\";\n\n            str += `\"${name}\": \"${generateTemplateFn(value.toString())}\",`;\n          }\n        }\n\n        str += \"};\\n\";\n      }\n    }\n\n    figma.ui.postMessage(str);\n  } else if (msg.type === \"assignTranslationVariables\") {\n    const localCollections =\n      await figma.variables.getLocalVariableCollectionsAsync();\n\n    const i18nCollection = localCollections.find((c) => c.name === \"i18n\");\n    console.log({ i18nCollection });\n\n    if (i18nCollection === undefined) {\n      return figma.ui.postMessage(\"No i18nCollection found.\");\n    } else {\n      for (const node of figma.currentPage.selection) {\n        if (node.type === \"TEXT\" && node.name.startsWith(\"#\")) {\n          const layerName = node.name.substring(1); // Remove the leading '#'\n          let variable: Variable | undefined = undefined;\n\n          for (const variableId of i18nCollection.variableIds) {\n            const v = await figma.variables.getVariableByIdAsync(variableId);\n            if (v?.name === layerName) {\n              variable = v;\n              break;\n            }\n          }\n\n          if (variable === undefined) {\n            figma.ui.postMessage(\n              `layer name does not match any variable in i18n collection, please check the layer name: ${layerName}`\n            );\n          } else {\n            console.log({ variable });\n            node.setBoundVariable(\"characters\", variable);\n            console.log({ nodeAfter: node, variable });\n            figma.ui.postMessage(\"successfully assigned translation variables\");\n          }\n        }\n      }\n    }\n  } else if (msg.type === \"createVariables\") {\n    const targetName = \"i18n\";\n    const localCollections =\n      await figma.variables.getLocalVariableCollectionsAsync();\n\n    const i18nCollection = findOrCreateCollection(localCollections, targetName);\n    // creating a collection will have 1 default mode therefore we are checking this\n    if (i18nCollection.modes.length === 1) {\n      i18nCollection.renameMode(i18nCollection.modes[0].modeId, modeName.en);\n      i18nCollection.addMode(modeName.ja);\n    }\n\n    const targetModeId =\n      msg.language === \"en\"\n        ? i18nCollection.modes[0].modeId\n        : i18nCollection.modes[1].modeId;\n\n    for (const node of figma.currentPage.selection) {\n      if (node.type === \"TEXT\" && node.visible && node.name.startsWith(\"#\")) {\n        const layerName = node.name.substring(1); // Remove the leading '#'\n        const nodeText = node.characters;\n\n        let variable: Variable | undefined = undefined;\n\n        for (const variableId of i18nCollection.variableIds) {\n          const v = await figma.variables.getVariableByIdAsync(variableId);\n          if (v?.name === layerName) {\n            variable = v;\n            break;\n          }\n        }\n\n        if (variable === undefined) {\n          variable = await figma.variables.createVariable(\n            layerName,\n            i18nCollection,\n            \"STRING\"\n          );\n          if (variable !== undefined) {\n            console.log({ node: nodeText });\n\n            variable.setValueForMode(targetModeId, nodeText);\n            variable.setValueForMode(\n              i18nCollection.modes[1].modeId,\n              \"TODO_TRANSLATE\"\n            );\n            node.setBoundVariable(\"characters\", variable);\n            figma.ui.postMessage(\"successfully created translation variables\");\n          } else {\n            figma.ui.postMessage(\n              `error generate variable layer name: ${layerName}`\n            );\n          }\n        } else {\n          const variableValue = variable.valuesByMode[targetModeId];\n\n          if (variableValue !== undefined && nodeText !== variableValue) {\n            variable.setValueForMode(targetModeId, nodeText);\n            node.setBoundVariable(\"characters\", variable);\n            figma.ui.postMessage(\n              `layer name already exists in i18n collection, replace with: ${variableValue}`\n            );\n          } else {\n            node.setBoundVariable(\"characters\", variable);\n            figma.ui.postMessage(\n              `layer name already exists in i18n collection, no changes made: ${layerName}`\n            );\n          }\n        }\n      }\n    }\n  }\n};\n"],
  "mappings": "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",
  "names": ["modeName"]
}
